// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: memory.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserMemoryService_Set_FullMethodName            = "/memory.UserMemoryService/Set"
	UserMemoryService_Get_FullMethodName            = "/memory.UserMemoryService/Get"
	UserMemoryService_GetUserContext_FullMethodName = "/memory.UserMemoryService/GetUserContext"
	UserMemoryService_SetMoment_FullMethodName      = "/memory.UserMemoryService/SetMoment"
	UserMemoryService_GetMoments_FullMethodName     = "/memory.UserMemoryService/GetMoments"
	UserMemoryService_SemanticSearch_FullMethodName = "/memory.UserMemoryService/SemanticSearch"
)

// UserMemoryServiceClient is the client API for UserMemoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserMemoryServiceClient interface {
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetUserContext(ctx context.Context, in *UserContextRequest, opts ...grpc.CallOption) (*UserContextResponse, error)
	SetMoment(ctx context.Context, in *SetMomentRequest, opts ...grpc.CallOption) (*SetResponse, error)
	GetMoments(ctx context.Context, in *GetMomentsRequest, opts ...grpc.CallOption) (*GetMomentsResponse, error)
	SemanticSearch(ctx context.Context, in *SemanticSearchRequest, opts ...grpc.CallOption) (*SemanticSearchResponse, error)
}

type userMemoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMemoryServiceClient(cc grpc.ClientConnInterface) UserMemoryServiceClient {
	return &userMemoryServiceClient{cc}
}

func (c *userMemoryServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, UserMemoryService_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMemoryServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, UserMemoryService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMemoryServiceClient) GetUserContext(ctx context.Context, in *UserContextRequest, opts ...grpc.CallOption) (*UserContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserContextResponse)
	err := c.cc.Invoke(ctx, UserMemoryService_GetUserContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMemoryServiceClient) SetMoment(ctx context.Context, in *SetMomentRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, UserMemoryService_SetMoment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMemoryServiceClient) GetMoments(ctx context.Context, in *GetMomentsRequest, opts ...grpc.CallOption) (*GetMomentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMomentsResponse)
	err := c.cc.Invoke(ctx, UserMemoryService_GetMoments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMemoryServiceClient) SemanticSearch(ctx context.Context, in *SemanticSearchRequest, opts ...grpc.CallOption) (*SemanticSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SemanticSearchResponse)
	err := c.cc.Invoke(ctx, UserMemoryService_SemanticSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMemoryServiceServer is the server API for UserMemoryService service.
// All implementations must embed UnimplementedUserMemoryServiceServer
// for forward compatibility.
type UserMemoryServiceServer interface {
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetUserContext(context.Context, *UserContextRequest) (*UserContextResponse, error)
	SetMoment(context.Context, *SetMomentRequest) (*SetResponse, error)
	GetMoments(context.Context, *GetMomentsRequest) (*GetMomentsResponse, error)
	SemanticSearch(context.Context, *SemanticSearchRequest) (*SemanticSearchResponse, error)
	mustEmbedUnimplementedUserMemoryServiceServer()
}

// UnimplementedUserMemoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserMemoryServiceServer struct{}

func (UnimplementedUserMemoryServiceServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedUserMemoryServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserMemoryServiceServer) GetUserContext(context.Context, *UserContextRequest) (*UserContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserContext not implemented")
}
func (UnimplementedUserMemoryServiceServer) SetMoment(context.Context, *SetMomentRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMoment not implemented")
}
func (UnimplementedUserMemoryServiceServer) GetMoments(context.Context, *GetMomentsRequest) (*GetMomentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoments not implemented")
}
func (UnimplementedUserMemoryServiceServer) SemanticSearch(context.Context, *SemanticSearchRequest) (*SemanticSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SemanticSearch not implemented")
}
func (UnimplementedUserMemoryServiceServer) mustEmbedUnimplementedUserMemoryServiceServer() {}
func (UnimplementedUserMemoryServiceServer) testEmbeddedByValue()                           {}

// UnsafeUserMemoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserMemoryServiceServer will
// result in compilation errors.
type UnsafeUserMemoryServiceServer interface {
	mustEmbedUnimplementedUserMemoryServiceServer()
}

func RegisterUserMemoryServiceServer(s grpc.ServiceRegistrar, srv UserMemoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserMemoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserMemoryService_ServiceDesc, srv)
}

func _UserMemoryService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMemoryServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMemoryService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMemoryServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMemoryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMemoryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMemoryService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMemoryServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMemoryService_GetUserContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMemoryServiceServer).GetUserContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMemoryService_GetUserContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMemoryServiceServer).GetUserContext(ctx, req.(*UserContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMemoryService_SetMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMomentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMemoryServiceServer).SetMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMemoryService_SetMoment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMemoryServiceServer).SetMoment(ctx, req.(*SetMomentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMemoryService_GetMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMomentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMemoryServiceServer).GetMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMemoryService_GetMoments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMemoryServiceServer).GetMoments(ctx, req.(*GetMomentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMemoryService_SemanticSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SemanticSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMemoryServiceServer).SemanticSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMemoryService_SemanticSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMemoryServiceServer).SemanticSearch(ctx, req.(*SemanticSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserMemoryService_ServiceDesc is the grpc.ServiceDesc for UserMemoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMemoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "memory.UserMemoryService",
	HandlerType: (*UserMemoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _UserMemoryService_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserMemoryService_Get_Handler,
		},
		{
			MethodName: "GetUserContext",
			Handler:    _UserMemoryService_GetUserContext_Handler,
		},
		{
			MethodName: "SetMoment",
			Handler:    _UserMemoryService_SetMoment_Handler,
		},
		{
			MethodName: "GetMoments",
			Handler:    _UserMemoryService_GetMoments_Handler,
		},
		{
			MethodName: "SemanticSearch",
			Handler:    _UserMemoryService_SemanticSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "memory.proto",
}
